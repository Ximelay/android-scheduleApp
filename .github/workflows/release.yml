name: Create Release on Push or Pull Request

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-release:
    runs-on: ubuntu-latest

    steps:
      # 1. Чекаут репозитория
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. Настройка JDK 17
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # 3. Делаем gradlew исполняемым
      - name: Make gradlew executable
        run: chmod +x ./gradlew

      # 4. Создание временной папки для keystore
      - name: Create temp directory for keystore
        run: mkdir -p app/temp_keys

      # 5. Сохранение Base64 секрета
      - name: Save Keystore Base64
        run: echo "${{ secrets.KEYSTORE_BASE64 }}" > keystore.base64
        env:
          KEYSTORE_BASE64: ${{ secrets.KEYSTORE_BASE64 }}

      # 6. Декодирование keystore
      - name: Decode Keystore
        run: base64 -d keystore.base64 > app/temp_keys/key.jks

      # 7. Сборка релизного APK
      - name: Build Release APK
        env:
          KEYSTORE_PATH: app/temp_keys/key.jks
          KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
          KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
          KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
        run: |
          echo "KEYSTORE_PATH is set to $KEYSTORE_PATH"
          ./gradlew assembleRelease --info

      # 8. Подпись APK с временной меткой
      - name: Sign APK with timestamp
        run: |
          apksigner sign \
          --ks app/temp_keys/key.jks \
          --ks-pass pass:${{ secrets.KEYSTORE_PASSWORD }} \
          --key-pass pass:${{ secrets.KEY_PASSWORD }} \
          --ks-key-alias ${{ secrets.KEY_ALIAS }} \
          --tsa http://timestamp.digicert.com \
          app/build/outputs/apk/release/app-release.apk

      # 9. Получение версии из build.gradle.kts для тега релиза
      - name: Get version name
        id: version
        run: |
          VERSION_NAME=$(grep 'versionName' app/build.gradle.kts | awk '{print $3}' | tr -d '"')
          echo "VERSION_NAME=$VERSION_NAME" >> $GITHUB_OUTPUT

      # 10. Создание релиза в GitHub
      - name: Create GitHub Release
        id: create-release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.version.outputs.VERSION_NAME }}
          release_name: Release v${{ steps.version.outputs.VERSION_NAME }}
          draft: false
          prerelease: false

      # 11. Загрузка APK в релиз как артефакт
      - name: Upload APK to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create-release.outputs.upload_url }}
          asset_path: app/build/outputs/apk/release/app-release.apk
          asset_name: app-release-v${{ steps.version.outputs.VERSION_NAME }}.apk
          asset_content_type: application/vnd.android.package-archive

      # 12. Очистка временных файлов
      - name: Clean up
        run: rm -f keystore.base64 app/temp_keys/key.jks
        if: always()